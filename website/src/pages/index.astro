---
import '../styles/global.css'
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="description"
			content="Notify-zh: Lightweight JavaScript notification library with zero dependencies. Create beautiful, responsive toast notifications for web apps. Easy integration with React, Vue, Angular, Next.js and vanilla JS."
		/>
		<meta
			name="keywords"
			content="javascript notifications, toast notifications, web notifications, notification library, javascript toast, lightweight notifications, zero dependencies, react notifications, vue notifications, angular notifications, web development, frontend library"
		/>
		<meta name="author" content="Xavier González" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="robots" content="index, follow" />
		<meta name="language" content="English" />
		<title>
			Notify-zh - Lightweight JavaScript Notification Library | Zero
			Dependencies Toast Notifications
		</title>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link
			rel="icon"
			type="image/png"
			sizes="32x32"
			href="/favicon-32x32.png"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="16x16"
			href="/favicon-16x16.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="180x180"
			href="/apple-touch-icon.png"
		/>
		<link rel="manifest" href="/site.webmanifest" />
		<meta name="theme-color" content="#2563eb" />
		<link rel="canonical" href="https://notify-zh.com" />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content="https://notify-zh.com" />
		<meta
			property="og:title"
			content="Notify-zh - Lightweight JavaScript Notification Library"
		/>
		<meta
			property="og:description"
			content="Lightweight JavaScript notification library with zero dependencies. Create beautiful, responsive toast notifications for web apps. Easy integration with React, Vue, Angular, Next.js and vanilla JS."
		/>
		<meta
			property="og:image"
			content="https://notify-zh.com/og-image.png"
		/>
		<meta property="og:site_name" content="Notify-zh" />
		<meta property="og:locale" content="en_US" />

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content="https://notify-zh.com" />
		<meta
			property="twitter:title"
			content="Notify-zh - Lightweight JavaScript Notification Library"
		/>
		<meta
			property="twitter:description"
			content="Lightweight JavaScript notification library with zero dependencies. Create beautiful, responsive toast notifications for web apps."
		/>
		<meta
			property="twitter:image"
			content="https://notify-zh.com/og-image.png"
		/>

		<!-- Structured Data -->
		<script type="application/ld+json">
			{
				"@context": "https://schema.org",
				"@type": "SoftwareApplication",
				"name": "Notify-zh",
				"description": "Lightweight JavaScript notification library with zero dependencies. Create beautiful, responsive toast notifications for web apps.",
				"url": "https://notify-zh.com",
				"author": {
					"@type": "Person",
					"name": "Xavier González"
				},
				"applicationCategory": "DeveloperApplication",
				"operatingSystem": "Any",
				"programmingLanguage": "JavaScript",
				"offers": {
					"@type": "Offer",
					"price": "0",
					"priceCurrency": "USD"
				},
				"keywords": "javascript notifications, toast notifications, web notifications, notification library, zero dependencies",
				"softwareVersion": "1.0.0",
				"downloadUrl": "https://github.com/xavivzla/notify-zh",
				"codeRepository": "https://github.com/xavivzla/notify-zh"
			}
		</script>

		<!-- Google Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
			rel="stylesheet"
		/>

		<style>
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family:
					'Inter',
					-apple-system,
					BlinkMacSystemFont,
					'Segoe UI',
					Roboto,
					sans-serif;
				line-height: 1.6;
				color: #333;
				background: #fff;
			}

			.container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 0 20px;
			}

			/* Header */
			header {
				padding: 20px 0;
				border-bottom: 1px solid #eee;
			}

			.header-content {
				display: flex;
				justify-content: space-between;
				align-items: center;
			}

			.logo {
				display: flex;
				align-items: center;
				gap: 12px;
				text-decoration: none;
			}

			.logo:hover .logo-text {
				color: #1d4ed8;
			}

			.logo-img {
				width: 24px;
				height: 24px;
				transition: transform 0.2s;
			}

			.logo:hover .logo-img {
				transform: scale(1.05);
			}

			.logo-text {
				font-size: 24px;
				font-weight: 700;
				color: #2563eb;
				transition: color 0.2s;
			}

			nav {
				display: flex;
				align-items: center;
				gap: 24px;
			}

			nav a {
				color: #6b7280;
				text-decoration: none;
				font-weight: 500;
				transition: color 0.2s;
			}

			nav a:hover {
				color: #2563eb;
			}

			.github-link {
				display: inline-flex;
				align-items: center;
				gap: 8px;
				padding: 8px 16px;
				background: #24292e;
				color: white;
				text-decoration: none;
				border-radius: 6px;
				font-size: 14px;
				font-weight: 500;
				transition: background 0.2s;
			}

			.github-link:hover {
				background: #1a1e22;
			}

			/* Hero Section */
			.hero {
				padding: 80px 0 60px;
				text-align: center;
			}

			.hero-logo {
				display: flex;
				align-items: center;
				justify-content: center;
				gap: 20px;
				margin-bottom: 16px;
			}

			.hero-logo-img {
				width: 64px;
				height: 64px;
			}

			.hero h1 {
				font-size: 48px;
				font-weight: 700;
				margin: 0;
				color: #1f2937;
			}

			.hero .subtitle {
				font-size: 20px;
				color: #6b7280;
				margin-bottom: 40px;
				max-width: 600px;
				margin-left: auto;
				margin-right: auto;
			}

			.features {
				display: flex;
				justify-content: center;
				gap: 40px;
				margin-bottom: 40px;
				flex-wrap: wrap;
			}

			.feature {
				display: flex;
				align-items: center;
				gap: 8px;
				font-size: 16px;
				color: #4b5563;
			}

			.feature-icon {
				width: 20px;
				height: 20px;
				color: #10b981;
			}

			/* Demo Section */
			.demo-section {
				padding: 60px 0;
				background: #f9fafb;
			}

			.demo-container {
				max-width: 800px;
				margin: 0 auto;
				text-align: center;
			}

			.demo-title {
				font-size: 32px;
				font-weight: 600;
				margin-bottom: 16px;
				color: #1f2937;
			}

			.demo-subtitle {
				font-size: 18px;
				color: #6b7280;
				margin-bottom: 40px;
			}

			.demo-buttons {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
				gap: 16px;
				margin-bottom: 40px;
			}

			.demo-btn {
				padding: 12px 24px;
				border: none;
				border-radius: 8px;
				font-size: 14px;
				font-weight: 500;
				cursor: pointer;
				transition: all 0.2s;
				color: white;
			}

			.demo-btn:hover {
				transform: translateY(-1px);
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			}

			.btn-success {
				background: #10b981;
			}
			.btn-error {
				background: #ef4444;
			}
			.btn-warning {
				background: #f59e0b;
			}
			.btn-info {
				background: #3b82f6;
			}

			/* Installation Section */
			.installation {
				padding: 60px 0;
			}

			.installation-title {
				font-size: 32px;
				font-weight: 600;
				text-align: center;
				margin-bottom: 40px;
				color: #1f2937;
			}

			.install-methods {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
				gap: 24px;
				max-width: 800px;
				margin: 0 auto;
			}

			.install-card {
				padding: 24px;
				border: 1px solid #e5e7eb;
				border-radius: 12px;
				background: white;
			}

			.install-card h3 {
				font-size: 18px;
				font-weight: 600;
				margin-bottom: 12px;
				color: #1f2937;
			}

			.code-block {
				background: #1f2937;
				color: #f9fafb;
				padding: 16px;
				border-radius: 8px;
				font-family: 'Monaco', 'Menlo', monospace;
				font-size: 14px;
				overflow-x: auto;
				position: relative;
			}

			.copy-btn {
				position: absolute;
				top: 8px;
				right: 8px;
				padding: 4px 8px;
				background: #374151;
				color: #d1d5db;
				border: none;
				border-radius: 4px;
				font-size: 12px;
				cursor: pointer;
				transition: background 0.2s;
			}

			.copy-btn:hover {
				background: #4b5563;
			}

			/* Usage Section */
			.usage {
				padding: 60px 0;
				background: #f9fafb;
			}

			.usage-title {
				font-size: 32px;
				font-weight: 600;
				text-align: center;
				margin-bottom: 40px;
				color: #1f2937;
			}

			.usage-example {
				max-width: 600px;
				margin: 0 auto;
			}

			/* Tabs System */
			.tabs-container {
				max-width: 800px;
				margin: 0 auto;
				background: white;
				border-radius: 12px;
				box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
				overflow: hidden;
			}

			.tabs-nav {
				display: flex;
				background: #f8fafc;
				border-bottom: 1px solid #e2e8f0;
				overflow-x: auto;
			}

			.tab-button {
				flex: 1;
				min-width: 120px;
				padding: 12px 16px;
				background: none;
				border: none;
				font-size: 14px;
				font-weight: 500;
				color: #64748b;
				cursor: pointer;
				transition: all 0.2s ease;
				border-bottom: 2px solid transparent;
				white-space: nowrap;
			}

			.tab-button:hover {
				color: #334155;
				background: #f1f5f9;
			}

			.tab-button.active {
				color: #2563eb;
				background: white;
				border-bottom-color: #2563eb;
			}

			.tab-content {
				display: none;
				padding: 0;
			}

			.tab-content.active {
				display: block;
			}

			.tab-content pre {
				margin: 0;
				border-radius: 0;
				border: none;
			}

			.tab-content code {
				border-radius: 0;
			}

			/* Responsive tabs */
			@media (max-width: 768px) {
				.tabs-nav {
					flex-wrap: wrap;
				}

				.tab-button {
					flex: none;
					min-width: auto;
					padding: 10px 12px;
					font-size: 13px;
				}
			}

			/* Footer */
			footer {
				padding: 40px 0;
				border-top: 1px solid #e5e7eb;
				text-align: center;
				color: #6b7280;
			}

			/* Configuration Form */
			.config-form {
				max-width: 800px;
				margin: 40px auto 0;
				padding: 2rem;
				background: white;
				border: 1px solid #e5e7eb;
				border-radius: 12px;
				box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
			}

			.config-header {
				text-align: center;
				margin-bottom: 2rem;
				padding-bottom: 1rem;
				border-bottom: 1px solid #f3f4f6;
			}

			.config-title {
				font-size: 1.5rem;
				font-weight: 600;
				color: #1f2937;
				margin-bottom: 0.5rem;
			}

			.config-subtitle {
				color: #6b7280;
				font-size: 0.875rem;
				margin: 0;
			}

			.config-sections {
				display: flex;
				flex-direction: column;
				gap: 1.5rem;
			}

			.config-section {
				padding: 0;
			}

			.section-title {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				font-size: 1rem;
				font-weight: 600;
				color: #374151;
				margin-bottom: 1rem;
			}

			.section-icon {
				width: 16px;
				height: 16px;
				color: #6b7280;
			}

			.config-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
				gap: 1.5rem;
			}

			.config-group {
				display: flex;
				flex-direction: column;
				gap: 0.5rem;
			}

			.config-group.full-width {
				grid-column: 1 / -1;
			}

			.config-label {
				display: flex;
				align-items: center;
				gap: 0.375rem;
				font-weight: 500;
				color: #374151;
				font-size: 0.875rem;
			}

			.label-icon {
				width: 14px;
				height: 14px;
				color: #9ca3af;
			}

			.tooltip {
				cursor: help;
				margin-left: auto;
				font-size: 0.75rem;
				opacity: 0.6;
				transition: opacity 0.15s ease;
			}

			.tooltip:hover {
				opacity: 0.9;
			}

			.config-input,
			.config-select {
				padding: 0.75rem;
				border: 1px solid #d1d5db;
				border-radius: 6px;
				font-size: 0.875rem;
				transition: border-color 0.15s ease;
				background: white;
			}

			.config-input:focus,
			.config-select:focus {
				outline: none;
				border-color: #3b82f6;
			}

			.icon-input-wrapper {
				position: relative;
			}

			.icon-input {
				padding-bottom: 3rem;
				min-height: 80px;
				resize: vertical;
			}

			.icon-examples {
				display: flex;
				gap: 0.5rem;
				margin-top: 0.75rem;
				flex-wrap: wrap;
			}

			.example-tag {
				padding: 0.5rem;
				background: #f9fafb;
				border: 1px solid #e5e7eb;
				border-radius: 4px;
				cursor: pointer;
				transition: all 0.15s ease;
				font-size: 1rem;
				display: flex;
				align-items: center;
				justify-content: center;
				min-width: 36px;
			}

			.example-tag:hover {
				background: #f3f4f6;
				border-color: #d1d5db;
			}

			.color-section-title {
				font-size: 0.875rem;
				font-weight: 500;
				color: #374151;
				margin: 1rem 0 0.75rem 0;
			}

			.color-grid {
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				gap: 0.75rem;
				margin-bottom: 1rem;
			}

			.color-group {
				display: flex;
				flex-direction: column;
				gap: 0.25rem;
			}

			.color-group label {
				font-size: 0.75rem;
				font-weight: 400;
				color: #6b7280;
			}

			.color-group input[type='color'] {
				width: 100%;
				height: 32px;
				border: 1px solid #d1d5db;
				border-radius: 4px;
				cursor: pointer;
			}

			.color-group input[type='color']:hover {
				border-color: #3b82f6;
			}

			.button-group {
				display: flex;
				gap: 12px;
				justify-content: center;
				flex-wrap: wrap;
				max-width: 600px;
				margin: 0 auto;
			}

			.test-btn,
			.copy-config-btn {
				flex: 1;
				min-width: 200px;
				padding: 14px 28px;
				color: white;
				border: none;
				border-radius: 12px;
				font-size: 16px;
				font-weight: 600;
				cursor: pointer;
				transition: all 0.2s;
			}

			.test-btn {
				background: linear-gradient(135deg, #3b82f6, #1d4ed8);
			}

			.test-btn:hover {
				transform: translateY(-2px);
				box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
			}

			.copy-config-btn {
				background: linear-gradient(135deg, #10b981, #059669);
			}

			.copy-config-btn:hover {
				transform: translateY(-2px);
				box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
			}

			@media (max-width: 480px) {
				.button-group {
					flex-direction: column;
					align-items: center;
				}

				.test-btn,
				.copy-config-btn {
					width: 100%;
					max-width: 300px;
				}
			}

			/* Responsive */
			@media (max-width: 768px) {
				.hero h1 {
					font-size: 36px;
				}

				.hero .subtitle {
					font-size: 18px;
				}

				.features {
					gap: 20px;
				}

				.demo-buttons {
					grid-template-columns: 1fr;
				}

				.config-grid {
					grid-template-columns: 1fr;
				}

				.color-grid,
				.tailwind-grid {
					grid-template-columns: 1fr;
				}
				.config-form {
					padding: 24px 20px;
				}
			}

			.style-toggle {
				margin-bottom: 20px;
			}

			.toggle-label {
				display: flex;
				align-items: center;
				gap: 10px;
				cursor: pointer;
				font-weight: 500;
				color: #374151;
			}

			.toggle-label input[type='checkbox'] {
				width: 18px;
				height: 18px;
				accent-color: #6366f1;
				cursor: pointer;
			}

			.toggle-text {
				user-select: none;
			}

			.tailwind-grid {
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				gap: 15px;
				margin-bottom: 20px;
			}

			.tailwind-group {
				display: flex;
				flex-direction: column;
				gap: 5px;
			}

			.tailwind-group label {
				font-size: 14px;
				font-weight: 500;
				color: #374151;
			}

			.tailwind-group input[type='text'] {
				padding: 8px 12px;
				border: 2px solid #e5e7eb;
				border-radius: 8px;
				font-size: 14px;
				transition: border-color 0.2s ease;
				font-family: 'Courier New', monospace;
			}

			.tailwind-group input[type='text']:focus {
				outline: none;
				border-color: #6366f1;
				box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
			}

			.tailwind-group input[type='text']:hover {
				border-color: #d1d5db;
			}

			/* Playground Action Buttons */
			.playground-actions {
				display: flex;
				gap: 16px;
				margin-top: 32px;
				padding-top: 24px;
				border-top: 1px solid #e5e7eb;
				justify-content: center;
				flex-wrap: wrap;
			}

			.action-btn {
				display: flex;
				align-items: center;
				gap: 8px;
				padding: 12px 24px;
				border: none;
				border-radius: 8px;
				font-size: 16px;
				font-weight: 600;
				cursor: pointer;
				transition: all 0.2s ease;
				text-decoration: none;
				min-width: 160px;
				justify-content: center;
			}

			.primary-btn {
				background: linear-gradient(135deg, #3b82f6, #1d4ed8);
				color: white;
				box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
			}

			.primary-btn:hover {
				background: linear-gradient(135deg, #2563eb, #1e40af);
				transform: translateY(-2px);
				box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
			}

			.secondary-btn {
				background: white;
				color: #374151;
				border: 2px solid #e5e7eb;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
			}

			.secondary-btn:hover {
				background: #f9fafb;
				border-color: #d1d5db;
				transform: translateY(-2px);
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
			}

			.btn-icon {
				width: 18px;
				height: 18px;
				flex-shrink: 0;
			}

			@media (max-width: 768px) {
				.playground-actions {
					flex-direction: column;
					align-items: center;
				}

				.action-btn {
					width: 100%;
					max-width: 280px;
				}
			}

			/* Preview Section */
			.preview-section {
				margin-top: 32px;
				padding-top: 24px;
				border-top: 1px solid #e5e7eb;
			}

			.preview-container {
				margin-top: 16px;
				padding: 24px;
				background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
				border-radius: 12px;
				border: 1px solid #e5e7eb;
				display: flex;
				justify-content: center;
				align-items: center;
				min-height: 120px;
			}

			.notification-preview {
				display: flex;
				align-items: center;
				gap: 12px;
				padding: 16px 20px;
				border-radius: 8px;
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
				max-width: 400px;
				width: 100%;
				position: relative;
				transition: all 0.3s ease;
			}

			.notification-preview.success {
				background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
			}

			.notification-preview.error {
				background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%);
			}

			.notification-preview.warning {
				background: linear-gradient(135deg, #fffbeb 0%, #fed7aa 100%);
			}

			.notification-preview.info {
				background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);
			}

			.preview-icon {
				display: flex;
				align-items: center;
				flex-shrink: 0;
			}

			.preview-content {
				flex: 1;
				min-width: 0;
			}

			.preview-message {
				font-size: 16px;
				font-weight: 500;
				color: #1f2937;
				line-height: 1.4;
				word-wrap: break-word;
			}

			.preview-close {
				background: none;
				border: none;
				font-size: 20px;
				font-weight: bold;
				color: #6b7280;
				cursor: pointer;
				padding: 4px 8px;
				border-radius: 4px;
				transition: all 0.2s ease;
				flex-shrink: 0;
			}

			.preview-close:hover {
				background: rgba(0, 0, 0, 0.1);
				color: #374151;
			}

			@media (max-width: 768px) {
				.preview-container {
					padding: 16px;
				}

				.notification-preview {
					padding: 12px 16px;
					gap: 8px;
				}

				.preview-message {
					font-size: 14px;
				}
			}

			/* Comparison Section */
			.comparison {
				padding: 80px 0;
				background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
			}

			.comparison-header-section {
				text-align: center;
				margin-bottom: 48px;
			}

			.comparison-icon {
				width: 48px;
				height: 48px;
				margin: 0 auto 16px;
				color: #3b82f6;
			}

			.comparison-title {
				font-size: 36px;
				font-weight: 700;
				text-align: center;
				margin-bottom: 16px;
				color: #1f2937;
			}

			.comparison-subtitle {
				font-size: 18px;
				color: #6b7280;
				text-align: center;
				margin-bottom: 24px;
				max-width: 600px;
				margin-left: auto;
				margin-right: auto;
			}

			.comparison-badges {
				display: flex;
				justify-content: center;
				gap: 12px;
				flex-wrap: wrap;
				margin-bottom: 48px;
			}

			.badge {
				padding: 6px 16px;
				border-radius: 20px;
				font-size: 14px;
				font-weight: 600;
				border: 2px solid transparent;
			}

			.badge-primary {
				background: linear-gradient(135deg, #3b82f6, #1d4ed8);
				color: white;
			}

			.badge-secondary {
				background: linear-gradient(135deg, #10b981, #059669);
				color: white;
			}

			.badge-accent {
				background: linear-gradient(135deg, #f59e0b, #d97706);
				color: white;
			}

			.comparison-table {
				max-width: 1000px;
				margin: 0 auto 60px;
				background: white;
				border-radius: 16px;
				overflow: hidden;
				box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
				border: 1px solid #e5e7eb;
			}

			.comparison-header {
				display: grid;
				grid-template-columns: 2fr repeat(4, 1fr);
				background: linear-gradient(135deg, #3b82f6, #1d4ed8);
				color: white;
				font-weight: 600;
				font-size: 14px;
			}

			.comparison-header > div {
				padding: 20px 16px;
				text-align: center;
				border-right: 1px solid rgba(255, 255, 255, 0.2);
			}

			.comparison-header > div:last-child {
				border-right: none;
			}

			.feature-name {
				text-align: left !important;
				font-weight: 700;
			}

			.library-name {
				font-weight: 700;
			}

			.comparison-row {
				display: grid;
				grid-template-columns: 2fr repeat(4, 1fr);
				border-bottom: 1px solid #f3f4f6;
				transition: all 0.2s ease;
			}

			.comparison-row:hover {
				background-color: #f9fafb;
				transform: scale(1.01);
			}

			.comparison-row:last-child {
				border-bottom: none;
			}

			.feature-cell {
				padding: 20px 16px;
				font-weight: 500;
				color: #374151;
				border-right: 1px solid #f3f4f6;
				display: flex;
				align-items: center;
				gap: 12px;
			}

			.feature-icon-small {
				width: 20px;
				height: 20px;
				color: #3b82f6;
				flex-shrink: 0;
			}

			.value-cell {
				padding: 20px 16px;
				text-align: center;
				font-weight: 500;
				color: #6b7280;
				border-right: 1px solid #f3f4f6;
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				gap: 4px;
			}

			.value-cell:last-child {
				border-right: none;
			}

			.value-cell.highlight {
				background: linear-gradient(135deg, #ecfdf5, #d1fae5);
				color: #065f46;
				font-weight: 600;
				position: relative;
				overflow: hidden;
			}

			.value-cell.highlight::before {
				content: '';
				position: absolute;
				left: 0;
				top: 0;
				bottom: 0;
				width: 4px;
				background: #10b981;
			}

			.value-cell.highlight::after {
				content: '';
				position: absolute;
				top: 0;
				left: -100%;
				width: 100%;
				height: 100%;
				background: rgba(255, 255, 255, 0.1);
			}

			.value-cell.good {
				background: rgba(34, 197, 94, 0.1);
				color: #22c55e;
				font-weight: 600;
			}

			.value-cell.average {
				background: rgba(251, 191, 36, 0.1);
				color: #f59e0b;
				font-weight: 600;
			}

			.value-cell.poor {
				background: rgba(239, 68, 68, 0.1);
				color: #ef4444;
				font-weight: 600;
			}

			.value-main {
				font-size: 16px;
				font-weight: 600;
			}

			.value-badge {
				font-size: 11px;
				padding: 4px 8px;
				border-radius: 12px;
				background: rgba(59, 130, 246, 0.1);
				color: #3b82f6;
				border: 1px solid rgba(59, 130, 246, 0.2);
				white-space: nowrap;
			}

			.value-badge.winner {
				background: linear-gradient(135deg, #fbbf24, #f59e0b);
				color: #1f2937;
				font-weight: 700;
				border: 1px solid #f59e0b;
				box-shadow: 0 2px 8px rgba(251, 191, 36, 0.3);
			}

			.comparison-summary {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
				gap: 24px;
				max-width: 1000px;
				margin: 0 auto;
			}

			.summary-card {
				background: white;
				padding: 32px;
				border-radius: 16px;
				box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
				border: 1px solid #e5e7eb;
				transition:
					transform 0.2s,
					box-shadow 0.2s;
				text-align: center;
			}

			.summary-card:hover {
				transform: translateY(-4px);
				box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
			}

			.summary-card h3 {
				font-size: 20px;
				font-weight: 600;
				margin-bottom: 16px;
				color: #1f2937;
			}

			.summary-card p {
				color: #6b7280;
				line-height: 1.6;
			}

			/* Responsive for comparison */
			@media (max-width: 768px) {
				.comparison-title {
					font-size: 28px;
				}

				.comparison-table {
					overflow-x: auto;
					margin: 0 -20px 40px;
					border-radius: 0;
				}

				.comparison-header,
				.comparison-row {
					min-width: 600px;
				}

				.feature-cell {
					justify-content: flex-start;
				}

				.value-badge {
					font-size: 10px;
					padding: 3px 6px;
				}

				.comparison-summary {
					grid-template-columns: 1fr;
					gap: 16px;
				}

				.summary-card {
					padding: 24px;
				}

				.comparison-badges {
					justify-content: center;
				}
			}

			/* Support Section */
			.support-section {
				padding: 4rem 0;
				background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
				border-top: 1px solid #e2e8f0;
			}

			.support-header {
				text-align: center;
				margin-bottom: 3rem;
			}

			.support-icon {
				width: 3rem;
				height: 3rem;
				margin: 0 auto 1rem;
				color: #ef4444;
			}

			.support-title {
				font-size: 2.25rem;
				font-weight: 700;
				color: #1f2937;
				margin-bottom: 1rem;
			}

			.support-subtitle {
				font-size: 1.125rem;
				color: #6b7280;
				max-width: 600px;
				margin: 0 auto;
			}

			.support-options {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
				gap: 2rem;
				max-width: 900px;
				margin: 0 auto 3rem;
			}

			.support-card {
				display: flex;
				align-items: center;
				gap: 1rem;
				padding: 1.5rem;
				background: white;
				border-radius: 1rem;
				box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
				transition: all 0.3s ease;
				text-decoration: none;
				border: 2px solid transparent;
			}

			.support-card:hover {
				transform: translateY(-4px);
				box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);
			}

			.support-card.github {
				border-color: #24292f;
			}

			.support-card.github:hover {
				background: linear-gradient(135deg, #24292f, #1c2128);
				color: white;
			}

			.support-card.coffee {
				border-color: #ffdd00;
			}

			.support-card.coffee:hover {
				background: linear-gradient(135deg, #ffdd00, #ffcc02);
				color: #1f2937;
			}

			.support-card-icon {
				width: 2.5rem;
				height: 2.5rem;
				flex-shrink: 0;
			}

			.support-card.github .support-card-icon {
				color: #24292f;
			}

			.support-card.coffee .support-card-icon {
				color: #ffdd00;
			}

			.support-card:hover .support-card-icon {
				color: inherit;
			}

			.support-card-content h3 {
				font-size: 1.125rem;
				font-weight: 600;
				color: #1f2937;
				margin-bottom: 0.25rem;
			}

			.support-card:hover .support-card-content h3 {
				color: inherit;
			}

			.support-card-content p {
				font-size: 0.875rem;
				color: #6b7280;
				margin: 0;
			}

			.support-card:hover .support-card-content p {
				color: inherit;
				opacity: 0.9;
			}

			.support-message {
				text-align: center;
				max-width: 600px;
				margin: 0 auto;
			}

			.support-message p {
				font-size: 1rem;
				color: #6b7280;
				margin-bottom: 0.5rem;
			}

			.support-message a {
				color: #3b82f6;
				text-decoration: none;
				font-weight: 600;
			}

			.support-message a:hover {
				text-decoration: underline;
			}

			@media (max-width: 768px) {
				.support-options {
					grid-template-columns: 1fr;
					gap: 1rem;
				}

				.support-card {
					padding: 1rem;
				}

				.support-card-icon {
					width: 2rem;
					height: 2rem;
				}

				.support-title {
					font-size: 1.875rem;
				}
			}
		</style>
	</head>
	<body>
		<!-- Header -->
		<header role="banner">
			<div class="container">
				<div class="header-content">
					<div class="logo">
						<img src="/logo.svg" alt="notify-zh" class="logo-img" />
						<span class="logo-text">notify-zh</span>
					</div>

					<a
						href="https://github.com/xavivzla/notify-zh"
						class="github-link"
					>
						<svg
							width="16"
							height="16"
							fill="currentColor"
							viewBox="0 0 24 24"
						>
							<path
								d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
							></path>
						</svg>
						GitHub
					</a>
				</div>
			</div>
		</header>

		<!-- Hero Section -->
		<main>
			<section class="hero" role="main" aria-labelledby="hero-title">
				<div class="container">
					<div class="hero-logo">
						<img
							src="/logo.svg"
							alt="notify-zh"
							class="hero-logo-img"
						/>
						<h1 id="hero-title">notify-zh</h1>
					</div>
					<p class="subtitle">
						The modern JavaScript notification library developers
						love. Lightweight, accessible, zero dependencies. Just
						~2KB gzipped.
					</p>

					<div class="features">
						<div class="feature">
							<svg
								class="feature-icon"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M5 13l4 4L19 7"></path>
							</svg>
							Responsive
						</div>
						<div class="feature">
							<svg
								class="feature-icon"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
								></path>
							</svg>
							Accessible
						</div>
						<div class="feature">
							<svg
								class="feature-icon"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M13 10V3L4 14h7v7l9-11h-7z"></path>
							</svg>
							Zero Dependencies
						</div>
						<div class="feature">
							<svg
								class="feature-icon"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"
								></path>
							</svg>
							Lightweight (~2KB)
						</div>
					</div>

					<!-- Interactive Configuration Form -->
					<section id="demo" aria-labelledby="demo-title">
						<div class="config-form">
							<div class="config-header">
								<h3 class="config-title" id="demo-title">
									Interactive Playground
								</h3>
								<p class="config-subtitle">
									Customize your notification in real-time
								</p>
							</div>

							<div class="config-sections">
								<!-- Sección Principal -->
								<div class="config-section">
									<h4 class="section-title">
										<svg
											class="section-icon"
											viewBox="0 0 24 24"
											fill="none"
										>
											<path
												d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
												stroke="currentColor"
												stroke-width="2"
												stroke-linecap="round"
												stroke-linejoin="round"></path>
										</svg>
										Content
									</h4>
									<div class="config-grid">
										<div class="config-group">
											<label
												for="message-input"
												class="config-label"
											>
												<svg
													class="label-icon"
													viewBox="0 0 24 24"
													fill="none"
												>
													<path
														d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"
														stroke="currentColor"
														stroke-width="2"
														stroke-linecap="round"
														stroke-linejoin="round"
													></path>
												</svg>
												Message
												<span
													class="tooltip"
													title="Text that will be displayed in the notification"
													>ℹ️</span
												>
											</label>
											<input
												type="text"
												id="message-input"
												class="config-input"
												value="Hello from notify-zh!"
												placeholder="Enter your message here..."
											/>
										</div>
										<div class="config-group">
											<label
												for="type-select"
												class="config-label"
											>
												<svg
													class="label-icon"
													viewBox="0 0 24 24"
													fill="none"
												>
													<path
														d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM7 3H5v12a2 2 0 002 2 2 2 0 002-2V3zM21 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4z"
														stroke="currentColor"
														stroke-width="2"
														stroke-linecap="round"
														stroke-linejoin="round"
													></path>
												</svg>
												Type
												<span
													class="tooltip"
													title="Visual style of the notification"
													>ℹ️</span
												>
											</label>
											<select
												id="type-select"
												class="config-select"
											>
												<option value="success"
													>✅ Success</option
												>
												<option value="error"
													>❌ Error</option
												>
												<option value="warning"
													>⚠️ Warning</option
												>
												<option value="info"
													>ℹ️ Information</option
												>
											</select>
										</div>
									</div>
								</div>

								<!-- Positioning Section -->
								<div class="config-section">
									<h4 class="section-title">
										<svg
											class="section-icon"
											viewBox="0 0 24 24"
											fill="none"
										>
											<path
												d="M4 6h16M4 10h16M4 14h16M4 18h16"
												stroke="currentColor"
												stroke-width="2"
												stroke-linecap="round"
												stroke-linejoin="round"></path>
										</svg>
										Positioning
									</h4>
									<div class="config-grid">
										<div class="config-group">
											<label
												for="position-select"
												class="config-label"
											>
												<svg
													class="label-icon"
													viewBox="0 0 24 24"
													fill="none"
												>
													<path
														d="M9 11H5a2 2 0 00-2 2v5a2 2 0 002 2h4a2 2 0 002-2v-5a2 2 0 00-2-2zM21 11h-4a2 2 0 00-2 2v5a2 2 0 002 2h4a2 2 0 002-2v-5a2 2 0 00-2-2zM9 4H5a2 2 0 00-2 2v3h8V6a2 2 0 00-2-2zM21 4h-4a2 2 0 00-2 2v3h8V6a2 2 0 00-2-2z"
														stroke="currentColor"
														stroke-width="2"
														stroke-linecap="round"
														stroke-linejoin="round"
													></path>
												</svg>
												Position
												<span
													class="tooltip"
													title="Location where the notification will appear"
													>ℹ️</span
												>
											</label>
											<select
												id="position-select"
												class="config-select"
											>
												<option value="top-right"
													>↗️ Top Right</option
												>
												<option value="top-left"
													>↖️ Top Left</option
												>
												<option value="bottom-right"
													>↘️ Bottom Right</option
												>
												<option value="bottom-left"
													>↙️ Bottom Left</option
												>
												<option value="center-top"
													>⬆️ Top Center</option
												>
												<option value="center-bottom"
													>⬇️ Bottom Center</option
												>
												<option value="center"
													>🎯 Center</option
												>
											</select>
										</div>
										<div class="config-group">
											<label
												for="duration-input"
												class="config-label"
											>
												<svg
													class="label-icon"
													viewBox="0 0 24 24"
													fill="none"
												>
													<circle
														cx="12"
														cy="12"
														r="10"
														stroke="currentColor"
														stroke-width="2"
													></circle>
													<polyline
														points="12,6 12,12 16,14"
														stroke="currentColor"
														stroke-width="2"
														stroke-linecap="round"
														stroke-linejoin="round"
													></polyline>
												</svg>
												Duration (ms)
												<span
													class="tooltip"
													title="Time the notification will remain visible"
													>ℹ️</span
												>
											</label>
											<input
												type="number"
												id="duration-input"
												class="config-input"
												value="3000"
												min="1000"
												max="10000"
												step="500"
											/>
										</div>
									</div>
								</div>

								<!-- Customization Section -->
								<div class="config-section">
									<h4 class="section-title">
										<svg
											class="section-icon"
											viewBox="0 0 24 24"
											fill="none"
										>
											<path
												d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
												stroke="currentColor"
												stroke-width="2"
												stroke-linecap="round"
												stroke-linejoin="round"></path>
										</svg>
										Customization
									</h4>
									<div class="config-group full-width">
										<label
											for="icon-input"
											class="config-label"
										>
											<svg
												class="label-icon"
												viewBox="0 0 24 24"
												fill="none"
											>
												<path
													d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
													stroke="currentColor"
													stroke-width="2"
													stroke-linecap="round"
													stroke-linejoin="round"
												></path>
											</svg>
											Custom Icon
											<span
												class="tooltip"
												title="HTML code for custom icon (emojis, SVG, etc.)"
												>ℹ️</span
											>
										</label>
										<div class="icon-input-wrapper">
											<input
												type="text"
												id="icon-input"
												class="config-input icon-input"
												value='<span style="margin-right: 10px; display:flex"><svg width="30" height="30" viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect width="512" height="512" rx="120" fill="#E0F2FE"/>
  <path d="M256 130c-60 0-100 44-100 104v118c0 22 12 40 28 40 10 0 20-6 28-14 8 8 18 14 28 14s20-6 28-14c8 8 18 14 28 14s20-6 28-14c8 8 18 14 28 14 16 0 28-18 28-40V234c0-60-40-104-100-104z"
        fill="#FFFFFF" stroke="#38BDF8" stroke-width="12" stroke-linejoin="round"/>
  <circle cx="226" cy="220" r="14" fill="#1E293B"/>
  <circle cx="286" cy="220" r="14" fill="#1E293B"/>
  <path d="M228 250q28 24 56 0" stroke="#1E293B" stroke-width="6" stroke-linecap="round"/>
  <circle cx="338" cy="160" r="28" fill="#EF4444" stroke="#DC2626" stroke-width="6"/>
</svg></span>'
												placeholder="<span>🎉</span> o <svg>...</svg>"
											/>
										</div>
									</div>
								</div>
							</div>

							<h4 class="color-section-title">
								Style Customization
							</h4>

							<div class="style-toggle">
								<label class="toggle-label">
									<input
										type="checkbox"
										id="tailwind-toggle"
									/>
									<span class="toggle-text"
										>Use Tailwind CSS</span
									>
								</label>
							</div>

							<div
								id="custom-colors"
								class="color-grid"
								style="display: grid;"
							>
								<div class="color-group">
									<label for="success-color">Success:</label>
									<input
										type="color"
										id="success-color"
										value="#10b981"
									/>
								</div>
								<div class="color-group">
									<label for="error-color">Error:</label>
									<input
										type="color"
										id="error-color"
										value="#ef4444"
									/>
								</div>
								<div class="color-group">
									<label for="warning-color">Warning:</label>
									<input
										type="color"
										id="warning-color"
										value="#f59e0b"
									/>
								</div>
								<div class="color-group">
									<label for="info-color">Information:</label>
									<input
										type="color"
										id="info-color"
										value="#3b82f6"
									/>
								</div>
							</div>

							<div
								id="tailwind-classes"
								class="tailwind-grid"
								style="display: none;"
							>
								<div class="tailwind-group">
									<label for="success-classes"
										>Success Classes:</label
									>
									<input
										type="text"
										id="success-classes"
										value="bg-green-500 text-white border-green-600"
										placeholder="bg-green-500 text-white"
									/>
								</div>
								<div class="tailwind-group">
									<label for="error-classes"
										>Error Classes:</label
									>
									<input
										type="text"
										id="error-classes"
										value="bg-red-500 text-white border-red-600"
										placeholder="bg-red-500 text-white"
									/>
								</div>
								<div class="tailwind-group">
									<label for="warning-classes"
										>Warning Classes:</label
									>
									<input
										type="text"
										id="warning-classes"
										value="bg-yellow-500 text-white border-yellow-600"
										placeholder="bg-yellow-500 text-white"
									/>
								</div>
								<div class="tailwind-group">
									<label for="info-classes"
										>Information Classes:</label
									>
									<input
										type="text"
										id="info-classes"
										value="bg-blue-500 text-white border-blue-600"
										placeholder="bg-blue-500 text-white"
									/>
								</div>
							</div>

							<!-- Preview Section -->
							<div class="preview-section">
								<h4 class="section-title">
									<svg
										class="section-icon"
										viewBox="0 0 24 24"
										fill="none"
									>
										<path
											d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
											stroke="currentColor"
											stroke-width="2"
											stroke-linecap="round"
											stroke-linejoin="round"></path>
										<path
											d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
											stroke="currentColor"
											stroke-width="2"
											stroke-linecap="round"
											stroke-linejoin="round"></path>
									</svg>
									Live Preview
								</h4>
								<div class="preview-container">
									<div
										id="notification-preview"
										class="notification-preview success"
									>
										<div
											class="preview-icon"
											id="preview-icon"
										>
											<span
												style="margin-right: 10px; display:flex"
												><svg
													width="30"
													height="30"
													viewBox="0 0 512 512"
													fill="none"
													xmlns="http://www.w3.org/2000/svg"
												>
													<rect
														width="512"
														height="512"
														rx="120"
														fill="#E0F2FE"></rect>
													<path
														d="M256 130c-60 0-100 44-100 104v118c0 22 12 40 28 40 10 0 20-6 28-14 8 8 18 14 28 14s20-6 28-14c8 8 18 14 28 14s20-6 28-14c8 8 18 14 28 14 16 0 28-18 28-40V234c0-60-40-104-100-104z"
														fill="#FFFFFF"
														stroke="#38BDF8"
														stroke-width="12"
														stroke-linejoin="round"
													></path>
													<circle
														cx="226"
														cy="220"
														r="14"
														fill="#1E293B"></circle>
													<circle
														cx="286"
														cy="220"
														r="14"
														fill="#1E293B"></circle>
													<path
														d="M228 250q28 24 56 0"
														stroke="#1E293B"
														stroke-width="6"
														stroke-linecap="round"
													></path>
													<circle
														cx="338"
														cy="160"
														r="28"
														fill="#EF4444"
														stroke="#DC2626"
														stroke-width="6"
													></circle>
												</svg></span
											>
										</div>
										<div class="preview-content">
											<div
												class="preview-message"
												id="preview-message"
											>
												Hello from notify-zh!
											</div>
										</div>
									</div>
								</div>
							</div>

							<!-- Action Buttons -->
							<div class="playground-actions">
								<button
									class="action-btn primary-btn"
									onclick="showNotification()"
									title="Test your notification with current settings"
								>
									<svg
										class="btn-icon"
										viewBox="0 0 24 24"
										fill="none"
									>
										<path
											d="M5 13l4 4L19 7"
											stroke="currentColor"
											stroke-width="2"
											stroke-linecap="round"
											stroke-linejoin="round"></path>
									</svg>
									Test Notification
								</button>
								<button
									class="action-btn secondary-btn"
									onclick="copyConfigCode()"
									title="Copy the configuration code to your clipboard"
								>
									<svg
										class="btn-icon"
										viewBox="0 0 24 24"
										fill="none"
									>
										<rect
											x="9"
											y="9"
											width="13"
											height="13"
											rx="2"
											ry="2"
											stroke="currentColor"
											stroke-width="2"
											fill="none"></rect>
										<path
											d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"
											stroke="currentColor"
											stroke-width="2"
											fill="none"></path>
									</svg>
									Copy Configuration
								</button>
							</div>
						</div>
					</section>
				</div>
			</section>

			<!-- Installation Section -->
			<section
				class="installation"
				id="install"
				aria-labelledby="install-title"
			>
				<div class="container">
					<h2 class="installation-title" id="install-title">
						Get Started in Seconds
					</h2>
					<p class="installation-subtitle">
						Choose your preferred installation method and start
						building amazing user experiences.
					</p>

					<div class="install-methods">
						<div class="install-card">
							<h3>📦 NPM</h3>
							<p>Perfect for modern build tools and bundlers</p>
							<div class="code-block">
								<button
									class="copy-btn"
									onclick="copyToClipboard('npm install notify-zh')"
									>Copy</button
								>
								npm install notify-zh
							</div>
						</div>

						<div class="install-card">
							<h3>🌐 CDN</h3>
							<p>
								Quick setup for prototypes and simple projects
							</p>
							<div class="code-block">
								<button
									class="copy-btn"
									onclick="copyToClipboard('<script src=&quot;https://unpkg.com/notify-zh@latest/dist/notify-zh.min.js&quot;></script>')"
									>Copy</button
								>
								&lt;script src="https://unpkg.com/notify-zh@latest/dist/notify-zh.min.js"&gt;&lt;/script&gt;
							</div>
						</div>
					</div>
				</div>
			</section>

			<!-- Usage Section -->
			<section class="usage" id="usage" aria-labelledby="usage-title">
				<div class="container">
					<h2 class="usage-title" id="usage-title">
						Simple & Powerful API
					</h2>
					<p class="usage-subtitle">
						Get up and running with just a few lines of code. No
						complex configuration needed.
					</p>

					<div class="tabs-container">
						<!-- Tab Navigation -->
						<div class="tabs-nav">
							<button class="tab-button active" data-tab="vanilla"
								>Vanilla HTML</button
							>
							<button class="tab-button" data-tab="astro"
								>Astro</button
							>
							<button class="tab-button" data-tab="react"
								>React</button
							>
							<button class="tab-button" data-tab="vue"
								>Vue.js</button
							>
							<button class="tab-button" data-tab="nextjs"
								>Next.js</button
							>
							<button class="tab-button" data-tab="angular"
								>Angular</button
							>
						</div>

						<!-- Tab Content -->
						<!-- Vanilla HTML Tab -->
						<div class="tab-content active" id="vanilla-panel">
							<div class="code-block">
								<button
									class="copy-btn"
									onclick="copyToClipboard(vanillaCode)"
									>Copy</button
								>
								<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;script src="https://unpkg.com/notify-zh@latest/dist/notify-zh.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;script&gt;
    // Basic notification
    notify('Hello world!');
    
    // With specific type
    notify.success('Operation successful!');
    notify.error('Something went wrong');
    notify.warning('Be careful');
    notify.info('Important information');
    
    // With custom options
    notify('Custom message', &#123;
      duration: 5000,
      position: 'top-right'
    &#125;);
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
							</div>
						</div>

						<!-- Astro Tab -->
						<div class="tab-content" id="astro-panel">
							<div class="code-block">
								<button
									class="copy-btn"
									onclick="copyToClipboard(astroCode)"
									>Copy</button
								>
								<pre><code>---
// src/pages/index.astro
---

&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Astro + notify-zh&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;button id="notify-btn"&gt;Show Notification&lt;/button&gt;
  
  &lt;script&gt;
    import notify from 'notify-zh';
    
    document.getElementById('notify-btn').addEventListener('click', () =&gt; &#123;
      notify.success('Hello from Astro!');
    &#125;);
    
    // Basic usage
    notify('Welcome to Astro!', &#123;
      position: 'top-right',
      duration: 3000
    &#125;);
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
							</div>
						</div>

						<!-- React Tab -->
						<div class="tab-content" id="react-panel">
							<div class="code-block">
								<button
									class="copy-btn"
									onclick="copyToClipboard(reactCode)"
									>Copy</button
								>
								<pre><code>import React from 'react';
import notify from 'notify-zh';

function App() &#123;
  const handleClick = () =&gt; &#123;
    notify.success('Hello from React!');
  &#125;;
  
  const showError = () =&gt; &#123;
    notify.error('Something went wrong!');
  &#125;;
  
  const showCustom = () =&gt; &#123;
    notify('Custom notification', &#123;
      duration: 5000,
      position: 'bottom-right',
      theme: 'dark'
    &#125;);
  &#125;;

  return (
    &lt;div&gt;
      &lt;button onClick=&#123;handleClick&#125;&gt;Success&lt;/button&gt;
      &lt;button onClick=&#123;showError&#125;&gt;Error&lt;/button&gt;
      &lt;button onClick=&#123;showCustom&#125;&gt;Custom&lt;/button&gt;
    &lt;/div&gt;
  );
&#125;

export default App;</code></pre>
							</div>
						</div>

						<!-- Vue.js Tab -->
						<div class="tab-content" id="vue-panel">
							<div class="code-block">
								<button
									class="copy-btn"
									onclick="copyToClipboard(vueCode)"
									>Copy</button
								>
								<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;button @click="showSuccess"&gt;Success&lt;/button&gt;
    &lt;button @click="showError"&gt;Error&lt;/button&gt;
    &lt;button @click="showWarning"&gt;Warning&lt;/button&gt;
    &lt;button @click="showInfo"&gt;Info&lt;/button&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import notify from 'notify-zh';

export default &#123;
  name: 'NotificationDemo',
  methods: &#123;
    showSuccess() &#123;
      notify.success('Operation completed successfully!');
    &#125;,
    showError() &#123;
      notify.error('An error occurred!');
    &#125;,
    showWarning() &#123;
      notify.warning('Please be careful!');
    &#125;,
    showInfo() &#123;
      notify.info('Here is some information', &#123;
        position: 'top-left',
        duration: 4000
      &#125;);
    &#125;
  &#125;
&#125;;
&lt;/script&gt;</code></pre>
							</div>
						</div>

						<!-- Next.js Tab -->
						<div class="tab-content" id="nextjs-panel">
							<div class="code-block">
								<button
									class="copy-btn"
									onclick="copyToClipboard(nextjsCode)"
									>Copy</button
								>
								<pre><code>// pages/index.js
import &#123; useEffect &#125; from 'react';
import notify from 'notify-zh';

export default function Home() &#123;
  useEffect(() =&gt; &#123;
    // Show welcome notification on page load
    notify('Welcome to Next.js!', &#123;
      position: 'top-center',
      duration: 3000
    &#125;);
  &#125;, []);

  const handleSubmit = async (e) =&gt; &#123;
    e.preventDefault();
    
    try &#123;
      // Simulate API call
      await fetch('/api/submit');
      notify.success('Form submitted successfully!');
    &#125; catch (error) &#123;
      notify.error('Failed to submit form');
    &#125;
  &#125;;

  return (
    &lt;div&gt;
      &lt;h1&gt;Next.js + notify-zh&lt;/h1&gt;
      &lt;form onSubmit=&#123;handleSubmit&#125;&gt;
        &lt;button type="submit"&gt;Submit&lt;/button&gt;
      &lt;/form&gt;
    &lt;/div&gt;
  );
&#125;</code></pre>
							</div>
						</div>

						<!-- Angular Tab -->
						<div class="tab-content" id="angular-panel">
							<div class="code-block">
								<button
									class="copy-btn"
									onclick="copyToClipboard(angularCode)"
									>Copy</button
								>
								<pre><code>// app.component.ts
import &#123; Component &#125; from '@angular/core';
import notify from 'notify-zh';

@Component(&#123;
  selector: 'app-root',
  template: `
    &lt;div&gt;
      &lt;h1&gt;Angular + notify-zh&lt;/h1&gt;
      &lt;button (click)="showSuccess()"&gt;Success&lt;/button&gt;
      &lt;button (click)="showError()"&gt;Error&lt;/button&gt;
      &lt;button (click)="showWarning()"&gt;Warning&lt;/button&gt;
      &lt;button (click)="showInfo()"&gt;Info&lt;/button&gt;
    &lt;/div&gt;
  `
&#125;)
export class AppComponent &#123;
  title = 'angular-notify-zh';

  showSuccess() &#123;
    notify.success('Task completed successfully!');
  &#125;

  showError() &#123;
    notify.error('An error has occurred!');
  &#125;

  showWarning() &#123;
    notify.warning('Warning: Please check your input!');
  &#125;

  showInfo() &#123;
    notify.info('Information: Process started', &#123;
      duration: 6000,
      position: 'bottom-center'
    &#125;);
  &#125;
&#125;</code></pre>
							</div>
						</div>
					</div>
				</div>
			</section>
		</main>

		<!-- Comparison Section -->
		<section
			class="comparison"
			id="comparison"
			aria-labelledby="comparison-title"
		>
			<div class="container">
				<div class="comparison-header-section">
					<div class="comparison-icon">
						<svg
							width="48"
							height="48"
							viewBox="0 0 24 24"
							fill="none"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
								stroke="#3b82f6"
								stroke-width="2"
								stroke-linecap="round"
								stroke-linejoin="round"></path>
						</svg>
					</div>
					<h2 class="comparison-title" id="comparison-title">
						Why Choose notify-zh?
					</h2>
					<p class="comparison-subtitle">
						See how we stack up against the most popular
						notification libraries
					</p>
					<div class="comparison-badges">
						<span class="badge badge-primary">Lighter</span>
						<span class="badge badge-secondary">More Flexible</span>
						<span class="badge badge-accent">Modern</span>
					</div>
				</div>

				<div class="comparison-table">
					<div class="comparison-header">
						<div class="feature-name">Feature</div>
						<div class="library-name">notify-zh</div>
						<div class="library-name">Toastify</div>
						<div class="library-name">Notyf</div>
						<div class="library-name">SweetAlert2</div>
					</div>

					<div class="comparison-row">
						<div class="feature-cell">
							<svg
								class="feature-icon-small"
								viewBox="0 0 24 24"
								fill="none"
							>
								<path
									d="M13 10V3L4 14h7v7l9-11h-7z"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"></path>
							</svg>
							Bundle Size
						</div>
						<div class="value-cell highlight">
							<span class="value-main">~2KB</span>
							<span class="value-badge winner">🏆 Winner</span>
						</div>
						<div class="value-cell">~8KB</div>
						<div class="value-cell">~4KB</div>
						<div class="value-cell poor">~45KB</div>
					</div>

					<div class="comparison-row">
						<div class="feature-cell">
							<svg
								class="feature-icon-small"
								viewBox="0 0 24 24"
								fill="none"
							>
								<path
									d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"></path>
							</svg>
							Zero Dependencies
						</div>
						<div class="value-cell highlight">✅</div>
						<div class="value-cell good">✅</div>
						<div class="value-cell good">✅</div>
						<div class="value-cell poor">❌</div>
					</div>

					<div class="comparison-row">
						<div class="feature-cell">
							<svg
								class="feature-icon-small"
								viewBox="0 0 24 24"
								fill="none"
							>
								<path
									d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"></path>
							</svg>
							Native TypeScript
						</div>
						<div class="value-cell highlight">✅</div>
						<div class="value-cell poor">❌</div>
						<div class="value-cell good">✅</div>
						<div class="value-cell good">✅</div>
					</div>

					<div class="comparison-row">
						<div class="feature-cell">
							<svg
								class="feature-icon-small"
								viewBox="0 0 24 24"
								fill="none"
							>
								<path
									d="M4 6h16M4 10h16M4 14h16M4 18h16"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"></path>
							</svg>
							Flexible Positions
						</div>
						<div class="value-cell highlight">
							<span class="value-main">7 positions</span>
							<span class="value-badge winner"
								>🏆 Most Options</span
							>
						</div>
						<div class="value-cell">4 positions</div>
						<div class="value-cell">4 positions</div>
						<div class="value-cell poor">3 positions</div>
					</div>

					<div class="comparison-row">
						<div class="feature-cell">
							<svg
								class="feature-icon-small"
								viewBox="0 0 24 24"
								fill="none"
							>
								<path
									d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"></path>
							</svg>
							Custom Icons
						</div>
						<div class="value-cell highlight">
							<span class="value-main">✅ HTML/SVG</span>
							<span class="value-badge winner">🏆 Complete</span>
						</div>
						<div class="value-cell poor">❌</div>
						<div class="value-cell average">✅ Limited</div>
						<div class="value-cell good">✅</div>
					</div>

					<div class="comparison-row">
						<div class="feature-cell">
							<svg
								class="feature-icon-small"
								viewBox="0 0 24 24"
								fill="none"
							>
								<path
									d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM7 3H5v12a2 2 0 002 2 2 2 0 002-2V3zM21 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4z"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"></path>
							</svg>
							Tailwind CSS
						</div>
						<div class="value-cell highlight">
							<span class="value-main">✅ Integrated</span>
							<span class="value-badge winner">🏆 Unique</span>
						</div>
						<div class="value-cell poor">❌</div>
						<div class="value-cell poor">❌</div>
						<div class="value-cell poor">❌</div>
					</div>

					<div class="comparison-row">
						<div class="feature-cell">
							<svg
								class="feature-icon-small"
								viewBox="0 0 24 24"
								fill="none"
							>
								<path
									d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"></path>
								<polyline
									points="14,2 14,8 20,8"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"></polyline>
							</svg>
							Simple API
						</div>
						<div class="value-cell highlight">✅</div>
						<div class="value-cell good">✅</div>
						<div class="value-cell good">✅</div>
						<div class="value-cell poor">❌ Complex</div>
					</div>

					<div class="comparison-row">
						<div class="feature-cell">
							<svg
								class="feature-icon-small"
								viewBox="0 0 24 24"
								fill="none"
							>
								<path
									d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"></path>
							</svg>
							Accessibility
						</div>
						<div class="value-cell highlight">✅ ARIA</div>
						<div class="value-cell poor">❌</div>
						<div class="value-cell good">✅</div>
						<div class="value-cell good">✅</div>
					</div>
				</div>

				<div class="comparison-summary">
					<div class="summary-card">
						<h3>🚀 Performance</h3>
						<p>
							At just ~2KB, notify-zh is one of the lightest
							libraries on the market without sacrificing
							functionality.
						</p>
					</div>
					<div class="summary-card">
						<h3>🎨 Flexibility</h3>
						<p>
							Native Tailwind CSS support and 7 different
							positions for maximum customization.
						</p>
					</div>
					<div class="summary-card">
						<h3>⚡ Simplicity</h3>
						<p>
							Intuitive and easy-to-use API, perfect for projects
							of any size.
						</p>
					</div>
				</div>
			</div>
		</section>

		<!-- Support Section -->
		<section
			class="support-section"
			id="support"
			aria-labelledby="support-title"
		>
			<div class="container">
				<div class="support-header">
					<svg class="support-icon" viewBox="0 0 24 24" fill="none">
						<path
							d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"></path>
					</svg>
					<h2 class="support-title" id="support-title">
						Support the Project
					</h2>
					<p class="support-subtitle">
						If notify-zh has been useful to you, consider supporting
						its continued development
					</p>
				</div>

				<div class="support-options">
					<a
						href="https://github.com/sponsors/xavivzla"
						target="_blank"
						rel="noopener"
						class="support-card github"
					>
						<svg
							class="support-card-icon"
							viewBox="0 0 24 24"
							fill="currentColor"
						>
							<path
								d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
							></path>
						</svg>
						<div class="support-card-content">
							<h3>GitHub Sponsors</h3>
							<p>Support development monthly</p>
						</div>
					</a>

					<a
						href="https://buymeacoffee.com/piratacode"
						target="_blank"
						rel="noopener"
						class="support-card coffee"
					>
						<svg
							class="support-card-icon"
							viewBox="0 0 24 24"
							fill="currentColor"
						>
							<path
								d="M20.216 6.415l-.132-.666c-.119-.598-.388-1.163-.766-1.613a4.44 4.44 0 0 0-1.364-1.04c-.354-.25-.773-.426-1.214-.518a9.909 9.909 0 0 0-1.85-.104c-.26.003-.52.021-.778.053a27.888 27.888 0 0 0-3.738.543c-.457.1-.917.214-1.375.347-.526.152-1.051.33-1.573.533-.562.219-1.127.473-1.69.751-.619.307-1.237.65-1.846 1.017-.47.283-.933.588-1.38.918-.564.417-1.154.855-1.725 1.333-.119.1-.235.204-.346.313-.1.098-.195.201-.287.307-.326.379-.39.918-.15 1.378.137.262.322.49.548.672.04.033.082.064.125.094.159.114.333.213.515.296.33.15.7.26 1.074.26.517 0 1.009-.174 1.397-.49.185-.151.346-.332.478-.532.13-.198.234-.417.308-.647.037-.115.068-.232.093-.35.007-.033.013-.066.018-.1.025-.165.037-.332.037-.5 0-.668-.27-1.308-.753-1.791a2.89 2.89 0 0 0-1.791-.753c-.5 0-.981.196-1.336.544-.18.176-.317.39-.4.627-.04.114-.068.232-.084.352-.008.06-.013.121-.016.183-.001.03-.001.06-.001.09 0 .417.21.798.559 1.027.174.114.38.18.596.18.5 0 .981-.196 1.336-.544.18-.176.317-.39.4-.627.04-.114.068-.232.084-.352.008-.06.013-.121.016-.183.001-.03.001-.06.001-.09 0-.417-.21-.798-.559-1.027-.174-.114-.38-.18-.596-.18z"
							></path>
						</svg>
						<div class="support-card-content">
							<h3>Buy Me a Coffee</h3>
							<p>Buy me a coffee ☕</p>
						</div>
					</a>
				</div>

				<div class="support-message">
					<p>
						💝 Your support helps keep notify-zh free and constantly
						improving
					</p>
					<p>
						🚀 You can also contribute code on <a
							href="https://github.com/xavivzla/notify-zh"
							target="_blank"
							rel="noopener">GitHub</a
						>
					</p>
				</div>
			</div>
		</section>

		<!-- Footer -->
		<footer>
			<div class="container">
				<p>
					&copy; 2024 notify-zh. Made with ❤️ for the JavaScript
					community.
				</p>
			</div>
		</footer>
		<!-- Notify-zh Script -->
		<script src="/notify-zh.mjs" type="module"></script>
		<script type="module">
			// Import notify-zh
			import notify from '/notify-zh.mjs'

			// Function to update preview
			function updatePreview() {
				const preview = document.getElementById('notification-preview')
				const previewMessage =
					document.getElementById('preview-message')
				const previewIcon = document.getElementById('preview-icon')

				if (!preview || !previewMessage || !previewIcon) return

				// Get current values
				const message =
					document.getElementById('message-input').value ||
					'Hello from notify-zh!'
				const type = document.getElementById('type-select').value
				const iconInput = document.getElementById('icon-input').value
				const useTailwind =
					document.getElementById('tailwind-toggle').checked

				// Update message
				previewMessage.textContent = message

				// Update icon
				previewIcon.innerHTML = iconInput

				// Update type class
				preview.className = `notification-preview ${type}`

				// Apply custom colors or Tailwind classes
				if (useTailwind) {
					// Clear inline styles when using Tailwind
					preview.style.background = ''

					// Apply Tailwind classes
					const classInput = document.getElementById(
						`${type}-classes`
					)
					if (classInput && classInput.value.trim()) {
						const classes = classInput.value
							.split(' ')
							.filter((c) => c.trim())
						preview.className = `notification-preview ${classes.join(' ')}`
					} else {
						// Fallback to default type class if no custom classes
						preview.className = `notification-preview ${type}`
					}
				} else {
					// Apply custom colors
					const colorInput = document.getElementById(`${type}-color`)
					if (colorInput) {
						const color = colorInput.value
						preview.style.background = `${color}`
					}
				}
			}

			// Global functions for the playground
			window.showNotification = function () {
				// Get form values
				const message =
					document.getElementById('message-input').value ||
					'Hello from notify-zh!'
				const type = document.getElementById('type-select').value
				const position =
					document.getElementById('position-select').value
				const duration =
					parseInt(document.getElementById('duration-input').value) ||
					3000
				const iconInput = document.getElementById('icon-input').value
				const useTailwind =
					document.getElementById('tailwind-toggle').checked

				// Configure notify-zh
				const config = {
					position: position,
					defaultTime: duration
				}

				if (useTailwind) {
					// Use Tailwind classes
					config.disableDefaultStyles = true
					config.classNames = {
						base: 'px-6 py-4 rounded-lg mb-4 shadow-lg font-medium text-white transition-all duration-300 transform',
						success:
							document.getElementById('success-classes').value ||
							'bg-green-500 text-white border-green-600',
						error:
							document.getElementById('error-classes').value ||
							'bg-red-500 text-white border-red-600',
						warning:
							document.getElementById('warning-classes').value ||
							'bg-yellow-500 text-white border-yellow-600',
						info:
							document.getElementById('info-classes').value ||
							'bg-blue-500 text-white border-blue-600'
					}
					// Remove backgrounds completely to prevent override of Tailwind styles
					config.backgrounds = {
						success: '',
						error: '',
						warning: '',
						info: ''
					}
				} else {
					// Use custom colors
					config.disableDefaultStyles = false
					config.backgrounds = {
						success:
							document.getElementById('success-color').value ||
							'#10b981',
						error:
							document.getElementById('error-color').value ||
							'#ef4444',
						warning:
							document.getElementById('warning-color').value ||
							'#f59e0b',
						info:
							document.getElementById('info-color').value ||
							'#3b82f6'
					}
				}

				// Apply configuration
				notify.config(config)

				// Create notification options
				const options = {
					message: message,
					time: duration,
					position: position
				}

				// Add icon if provided
				if (iconInput.trim()) {
					options.icon = { el: iconInput }
				}

				// Show notification based on type
				switch (type) {
					case 'success':
						notify.success(options)
						break
					case 'error':
						notify.error(options)
						break
					case 'warning':
						notify.warning(options)
						break
					case 'info':
						notify.info(options)
						break
					default:
						notify.success(options)
				}

				// If using Tailwind, remove inline background styles after notification is created
				if (useTailwind) {
					setTimeout(() => {
						const notifications =
							document.querySelectorAll('[id^="notify-"]')
						notifications.forEach((notification) => {
							notification.style.background = ''
						})
					}, 10)
				}
			}

			window.copyConfigCode = function () {
				// Get current form values
				const message =
					document.getElementById('message-input').value ||
					'Hello from notify-zh!'
				const type = document.getElementById('type-select').value
				const position =
					document.getElementById('position-select').value
				const duration =
					parseInt(document.getElementById('duration-input').value) ||
					3000
				const iconInput = document.getElementById('icon-input').value
				const useTailwind =
					document.getElementById('tailwind-toggle').checked

				// Generate configuration code
				let configCode = `import notify from 'notify-zh';\n\n`

				// Add configuration
				configCode += `// Configure notify-zh\n`
				configCode += `notify.config({\n`
				configCode += `  position: '${position}',\n`
				configCode += `  defaultTime: ${duration}`

				if (useTailwind) {
					configCode += `,\n  disableDefaultStyles: true,\n`
					configCode += `  classNames: {\n`
					configCode += `    base: 'px-6 py-4 rounded-lg shadow-lg font-medium text-white transition-all duration-300 transform',\n`
					configCode += `    success: '${document.getElementById('success-classes').value || 'bg-green-500 text-white border-green-600'}',\n`
					configCode += `    error: '${document.getElementById('error-classes').value || 'bg-red-500 text-white border-red-600'}',\n`
					configCode += `    warning: '${document.getElementById('warning-classes').value || 'bg-yellow-500 text-white border-yellow-600'}',\n`
					configCode += `    info: '${document.getElementById('info-classes').value || 'bg-blue-500 text-white border-blue-600'}'\n`
					configCode += `  },\n`
					configCode += `  backgrounds: {\n`
					configCode += `    success: '',\n`
					configCode += `    error: '',\n`
					configCode += `    warning: '',\n`
					configCode += `    info: ''\n`
					configCode += `  }`
				} else {
					configCode += `,\n  backgrounds: {\n`
					configCode += `    success: '${document.getElementById('success-color').value || '#10b981'}',\n`
					configCode += `    error: '${document.getElementById('error-color').value || '#ef4444'}',\n`
					configCode += `    warning: '${document.getElementById('warning-color').value || '#f59e0b'}',\n`
					configCode += `    info: '${document.getElementById('info-color').value || '#3b82f6'}'\n`
					configCode += `  }`
				}

				configCode += `\n});\n\n`

				// Add notification call
				configCode += `// Show notification\n`
				configCode += `notify.${type}({\n`
				configCode += `  message: '${message}',\n`
				configCode += `  time: ${duration},\n`
				configCode += `  position: '${position}'`

				if (iconInput.trim()) {
					configCode += `,\n  icon: { el: \`${iconInput}\` }`
				}

				configCode += `\n});`

				// Copy to clipboard
				navigator.clipboard
					.writeText(configCode)
					.then(() => {
						// Show success notification
						notify.success({
							message:
								'✅ Configuration code copied to clipboard!',
							time: 2000,
							position: 'top-right'
						})
					})
					.catch(() => {
						// Fallback for older browsers
						const textArea = document.createElement('textarea')
						textArea.value = configCode
						document.body.appendChild(textArea)
						textArea.select()
						document.execCommand('copy')
						document.body.removeChild(textArea)
						notify.success({
							message:
								'✅ Configuration code copied to clipboard!',
							time: 2000,
							position: 'top-right'
						})
					})
			}

			window.copyToClipboard = function (text) {
				navigator.clipboard
					.writeText(text)
					.then(() => {
						notify.success({
							message: '✅ Copied to clipboard!',
							time: 1500,
							position: 'top-right'
						})
					})
					.catch(() => {
						// Fallback for older browsers
						const textArea = document.createElement('textarea')
						textArea.value = text
						document.body.appendChild(textArea)
						textArea.select()
						document.execCommand('copy')
						document.body.removeChild(textArea)
						notify.success({
							message: '✅ Copied to clipboard!',
							time: 1500,
							position: 'top-right'
						})
					})
			}

			// Function to load Tailwind CSS
			function loadTailwindCSS() {
				// Check if Tailwind is already loaded
				if (document.getElementById('tailwind-css')) {
					console.log('Tailwind CSS already loaded')
					return
				}

				console.log('Loading Tailwind CSS...')
				const link = document.createElement('link')
				link.id = 'tailwind-css'
				link.rel = 'stylesheet'
				link.href = 'https://cdn.tailwindcss.com'
				link.crossOrigin = 'anonymous'

				// Add load event listener
				link.onload = function () {
					console.log('✅ Tailwind CSS loaded successfully')
					// Force a small delay to ensure styles are applied
					setTimeout(() => {
						// Trigger a re-render by toggling a class
						document.body.classList.add('tailwind-loaded')
						// Update preview after Tailwind is loaded
						if (typeof updatePreview === 'function') {
							updatePreview()
						}
					}, 100)
				}

				link.onerror = function () {
					console.error(
						'❌ Failed to load Tailwind CSS from cdn.tailwindcss.com, trying alternative...'
					)
					// Remove failed link
					link.remove()
					// Try alternative CDN - using a different approach
					const altLink = document.createElement('link')
					altLink.id = 'tailwind-css'
					altLink.rel = 'stylesheet'
					altLink.href =
						'https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css'
					altLink.crossOrigin = 'anonymous'
					altLink.onload = function () {
						console.log('✅ Tailwind CSS loaded from cdnjs')
						setTimeout(() => {
							document.body.classList.add('tailwind-loaded')
							// Update preview after Tailwind is loaded
							if (typeof updatePreview === 'function') {
								updatePreview()
							}
						}, 100)
					}
					altLink.onerror = function () {
						console.error(
							'❌ Failed to load from cdnjs, trying final fallback...'
						)
						// Final fallback - load via script tag with Play CDN
						altLink.remove()
						const script = document.createElement('script')
						script.id = 'tailwind-css'
						script.src = 'https://cdn.tailwindcss.com/3.4.0'
						script.onload = () => {
							console.log('✅ Tailwind CSS loaded via script tag')
							document.body.classList.add('tailwind-loaded')
							// Update preview after Tailwind is loaded
							if (typeof updatePreview === 'function') {
								updatePreview()
							}
						}
						script.onerror = () =>
							console.error(
								'❌ All Tailwind CSS loading methods failed'
							)
						document.head.appendChild(script)
					}
					document.head.appendChild(altLink)
				}

				document.head.appendChild(link)
			}

			// Function to remove Tailwind CSS
			function removeTailwindCSS() {
				const tailwindElement = document.getElementById('tailwind-css')
				if (tailwindElement) {
					tailwindElement.remove()
					console.log('🗑️ Tailwind CSS removed')
				}
				// Remove the tailwind-loaded class
				document.body.classList.remove('tailwind-loaded')
			}

			// Toggle between Tailwind and custom colors
			document
				.getElementById('tailwind-toggle')
				.addEventListener('change', function () {
					const customColors =
						document.getElementById('custom-colors')
					const tailwindClasses =
						document.getElementById('tailwind-classes')

					if (this.checked) {
						customColors.style.display = 'none'
						tailwindClasses.style.display = 'grid'
						// Load Tailwind CSS dynamically
						loadTailwindCSS()
					} else {
						customColors.style.display = 'grid'
						tailwindClasses.style.display = 'none'
						// Remove Tailwind CSS
						removeTailwindCSS()
						// Update preview immediately when switching to custom colors
						if (typeof updatePreview === 'function') {
							updatePreview()
						}
					}
				})

			// Initialize toggle state and preview
			document.addEventListener('DOMContentLoaded', function () {
				const toggle = document.getElementById('tailwind-toggle')
				const customColors = document.getElementById('custom-colors')
				const tailwindClasses =
					document.getElementById('tailwind-classes')

				if (toggle.checked) {
					customColors.style.display = 'none'
					tailwindClasses.style.display = 'grid'
					// Load Tailwind CSS if toggle is already checked
					loadTailwindCSS()
				} else {
					customColors.style.display = 'grid'
					tailwindClasses.style.display = 'none'
				}

				// Initialize preview
				updatePreview()

				// Add event listeners for real-time preview updates
				const inputs = [
					'message-input',
					'type-select',
					'icon-input',
					'tailwind-toggle',
					'success-color',
					'error-color',
					'warning-color',
					'info-color',
					'success-classes',
					'error-classes',
					'warning-classes',
					'info-classes'
				]

				inputs.forEach((inputId) => {
					const element = document.getElementById(inputId)
					if (element) {
						const eventType =
							element.type === 'checkbox' ? 'change' : 'input'
						element.addEventListener(eventType, updatePreview)
					}
				})

				// Initialize tabs functionality
				const tabButtons = document.querySelectorAll('.tab-button')
				const tabContents = document.querySelectorAll('.tab-content')

				// Set first tab as active by default
				if (tabButtons.length > 0 && tabContents.length > 0) {
					tabButtons[0].classList.add('active')
					tabContents[0].classList.add('active')
				}

				// Add click event listeners to tab buttons
				tabButtons.forEach((button, index) => {
					button.addEventListener('click', () => {
						// Remove active class from all buttons and contents
						tabButtons.forEach((btn) =>
							btn.classList.remove('active')
						)
						tabContents.forEach((content) =>
							content.classList.remove('active')
						)

						// Add active class to clicked button and corresponding content
						button.classList.add('active')
						if (tabContents[index]) {
							tabContents[index].classList.add('active')
						}
					})
				})
			})
		</script>
	</body>
</html>
